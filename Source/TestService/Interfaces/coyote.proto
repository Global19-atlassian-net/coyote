// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

syntax = "proto3";

option csharp_namespace = "Microsoft.Coyote.TestService";

package coyote;

// The Coyote test service definition.
service Scheduler {
  // Creates a new scheduler and return its globally unique id.
  rpc Initialize (InitializeRequest) returns (InitializeReply);

  // Attaches to the scheduler. This should be called at the beginning of a testing iteration.
  // It creates a main operation with id '0'.
  rpc Attach (AttachRequest) returns (AttachReply);

  // Detaches from the scheduler. This should be called at the end of a testing iteration.
  // It completes the main operation with id '0' and releases all controlled operations.
  rpc Detach (DetachRequest) returns (DetachReply);

  // Creates a new operation with the specified id.
  rpc CreateOperation (CreateOperationRequest) returns (CreateOperationReply);

  // Starts executing the operation with the specified id.
  rpc StartOperation (StartOperationRequest) returns (StartOperationReply);

  // Waits until the operation with the specified id has completed.
  rpc WaitOperation (WaitOperationRequest) returns (WaitOperationReply);

  // Completes executing the operation with the specified id and schedules the next operation.
  rpc CompleteOperation (CompleteOperationRequest) returns (CompleteOperationReply);

  // Schedules the next operation, which can include the currently executing operation.
  // Only operations that are not blocked nor completed can be scheduled.
  rpc ScheduleNext (ScheduleNextRequest) returns (ScheduleNextReply);
}

// The initialize scheduler request message containing the scheduler configuration.
message InitializeRequest {
  string strategy_type = 1;
  uint64 strategy_bound = 2;
  uint64 random_seed = 3;
}

// The initialize scheduler response message containing the scheduler id.
message InitializeReply {
  uint32 error_code = 1;
  string scheduler_id = 2;
}

// The attach scheduler request message containing the scheduler id.
message AttachRequest {
  string scheduler_id = 1;
}

// The attach scheduler response message containing the error code.
message AttachReply {
  uint32 error_code = 1;
  // The current iteration id.
  uint32 iteration = 2;
  // The id of the main operation.
  string main_operation_id = 3;
}

// The detach scheduler request message containing the scheduler id.
message DetachRequest {
  string scheduler_id = 1;
}

// The detach scheduler response message containing the error code.
message DetachReply {
  uint32 error_code = 1;
}

// The create operation request message containing the scheduler id and operation id.
message CreateOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The create operation response message containing the error code.
message CreateOperationReply {
  uint32 error_code = 1;
}

// The start operation request message containing the scheduler id and operation id.
message StartOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The start operation response message containing the error code.
message StartOperationReply {
  uint32 error_code = 1;
}

// The wait operation request message containing the scheduler id and operation id.
message WaitOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The wait operation response message containing the error code.
message WaitOperationReply {
  uint32 error_code = 1;
  // The next operation to schedule, if any.
  string next_operation_id = 2;
}

// The complete operation request message containing the scheduler id and operation id.
message CompleteOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The complete operation response message containing the error code.
message CompleteOperationReply {
  uint32 error_code = 1;
  // The next operation to schedule, if any.
  string next_operation_id = 2;
}

// The schedule next request message containing the scheduler id.
message ScheduleNextRequest {
  string scheduler_id = 1;
}

// The schedule next response message containing the error code.
message ScheduleNextReply {
  uint32 error_code = 1;
  // The next operation to schedule, if any.
  string next_operation_id = 2;
}
