// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

syntax = "proto3";

option csharp_namespace = "Microsoft.Coyote.TestService";

package coyote;

// The Coyote test service definition.
service Scheduler {
  // Creates a new scheduler and return its globally unique id.
  rpc Initialize (InitializeRequest) returns (InitializeReply);

  // Attaches to the scheduler. This should be called at the beginning of a testing iteration.
  // It creates a main operation with id '0'.
  rpc Attach (AttachRequest) returns (AttachReply);

  // Detaches from the scheduler. This should be called at the end of a testing iteration.
  // It completes the main operation with id '0' and releases all controlled operations.
  rpc Detach (DetachRequest) returns (DetachReply);

  // Creates a new operation with the specified id.
  rpc CreateOperation (CreateOperationRequest) returns (CreateOperationReply);

  // Starts executing the operation with the specified id.
  rpc StartOperation (StartOperationRequest) returns (StartOperationReply);

  // Blocks the currently scheduled operation until the operation with the specified id has completed
  // and schedules the next operation.
  rpc WaitOperation (WaitOperationRequest) returns (WaitOperationReply);

  // Blocks the currently scheduled operation until the resource with the specified id to become available
  // and schedules the next operation.
  rpc WaitResource (WaitResourceRequest) returns (WaitResourceReply);

  // Signals the operation with the specified id that the resource with the specified id is available.
  rpc SignalOperation (SignalOperationRequest) returns (SignalOperationReply);

  // Signals all waiting operations that the resource with the specified id is available.
  rpc SignalOperations (SignalOperationsRequest) returns (SignalOperationsReply);

  // Completes executing the operation with the specified id and schedules the next operation.
  rpc CompleteOperation (CompleteOperationRequest) returns (CompleteOperationReply);

  // Creates a new resource with the specified id.
  rpc CreateResource (CreateResourceRequest) returns (CreateResourceReply);

  // Deletes the resource with the specified id.
  rpc DeleteResource (DeleteResourceRequest) returns (DeleteResourceReply);

  // Schedules the next operation, which can include the currently executing operation.
  // Only operations that are not blocked nor completed can be scheduled.
  rpc ScheduleNext (ScheduleNextRequest) returns (ScheduleNextReply);

  // Returns a trace that can be used to replay a schedule.
  rpc GetTrace (GetTraceRequest) returns (GetTraceReply);
}

// The initialize scheduler request message containing the scheduler configuration.
message InitializeRequest {
  string scheduler_id = 1;
  string strategy_type = 2;
  uint32 max_steps = 3;
  uint64 strategy_bound = 4;
  string trace = 5;
  uint64 random_seed = 6;
}

// The initialize scheduler response message containing the scheduler id.
message InitializeReply {
  uint32 error_code = 1;
  string scheduler_id = 2;
}

// The attach scheduler request message containing the scheduler id.
message AttachRequest {
  string scheduler_id = 1;
}

// The attach scheduler response message.
message AttachReply {
  uint32 error_code = 1;
  // The current iteration id.
  uint32 iteration = 2;
  // The id of the main operation.
  string main_operation_id = 3;
}

// The detach scheduler request message containing the scheduler id.
message DetachRequest {
  string scheduler_id = 1;
}

// The detach scheduler response message.
message DetachReply {
  uint32 error_code = 1;
}

// The create operation request message containing the scheduler id and operation id.
message CreateOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The create operation response message.
message CreateOperationReply {
  uint32 error_code = 1;
}

// The start operation request message containing the scheduler id and operation id.
message StartOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The start operation response message.
message StartOperationReply {
  uint32 error_code = 1;
}

// The wait operation request message containing the scheduler id and operation id.
message WaitOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The wait operation response message.
message WaitOperationReply {
  uint32 error_code = 1;
  // The next operation to schedule, if any.
  string next_operation_id = 2;
}

// The wait resource request message containing the scheduler id and resource id.
message WaitResourceRequest {
  string scheduler_id = 1;
  string resource_id = 2;
}

// The wait resource response message.
message WaitResourceReply {
  uint32 error_code = 1;
  // The next operation to schedule, if any.
  string next_operation_id = 2;
}

// The signal operation request message containing the scheduler id and resource id.
message SignalOperationRequest {
  string scheduler_id = 1;
  string resource_id = 2;
  string operation_id = 3;
}

// The signal operation response message.
message SignalOperationReply {
  uint32 error_code = 1;
}

// The signal operations request message containing the scheduler id and resource id.
message SignalOperationsRequest {
  string scheduler_id = 1;
  string resource_id = 2;
}

// The signal operations response message.
message SignalOperationsReply {
  uint32 error_code = 1;
}

// The complete operation request message containing the scheduler id and operation id.
message CompleteOperationRequest {
  string scheduler_id = 1;
  string operation_id = 2;
}

// The complete operation response message.
message CompleteOperationReply {
  uint32 error_code = 1;
  // The next operation to schedule, if any.
  string next_operation_id = 2;
}

// The create resource request message containing the scheduler id and resource id.
message CreateResourceRequest {
  string scheduler_id = 1;
  string resource_id = 2;
}

// The create resource response message.
message CreateResourceReply {
  uint32 error_code = 1;
}

// The delete resource request message containing the scheduler id and resource id.
message DeleteResourceRequest {
  string scheduler_id = 1;
  string resource_id = 2;
}

// The delete resource response message.
message DeleteResourceReply {
  uint32 error_code = 1;
}

// The schedule next request message containing the scheduler id.
message ScheduleNextRequest {
  string scheduler_id = 1;
}

// The schedule next response message.
message ScheduleNextReply {
  uint32 error_code = 1;
  // The next operation to schedule, if any.
  string next_operation_id = 2;
}

// The get trace request message.
message GetTraceRequest {
  string scheduler_id = 1;
}

// The get trace response message.
message GetTraceReply {
  uint32 error_code = 1;
  string trace = 2;
}
